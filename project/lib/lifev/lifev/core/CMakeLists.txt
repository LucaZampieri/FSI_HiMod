
INCLUDE(TribitsPackageMacros)
INCLUDE(TribitsAddOptionAndDefine)
INCLUDE(TribitsLibraryMacros)

#
# A) Define the package
#

TRIBITS_PACKAGE(Core)
SET(${PACKAGE_NAME}_VERSION "3.1")

#
# B) Set up package-specific options
#

TRIBITS_ADD_SHOW_DEPRECATED_WARNINGS_OPTION()

TRIBITS_ADD_OPTION_AND_DEFINE(LifeV_${PACKAGE_NAME}_ENABLE_SPIRIT_PARSER
  ENABLE_SPIRIT_PARSER
  "Enable Boost Spirit Parser"
  ON )
IF(NOT HAVE_BOOST_SPIRIT_QI)
  SET(LifeV_${PACKAGE_NAME}_ENABLE_SPIRIT_PARSER FALSE)
  MESSAGE(STATUS "LifeV_Core: The parser has been disabled")
ENDIF()

FOREACH(TPL_NAME in ${Trilinos_TPL_LIST})
  IF(${TPL_NAME} STREQUAL "HDF5")
    SET(HAVE_HDF5 TRUE)
  ENDIF()
ENDFOREACH()

IF(TPL_ENABLE_HDF5)
  SET(LIFEV_HAS_HDF5 TRUE)
ENDIF()

IF(TPL_Boost_ENABLED)
  SET(HAVE_BOOST TRUE)
ENDIF()

STRING(TOUPPER ${CMAKE_BUILD_TYPE} BUILD_UPPER)
IF(BUILD_UPPER STREQUAL "DEBUG")
  SET(HAVE_LIFEV_DEBUG TRUE)
ENDIF()

IF(TPL_QHull_ENABLED)
  SET(HAVE_QHULL TRUE)
ENDIF()

FOREACH(TRILINOS_PACKAGE_NAME in ${Trilinos_PACKAGE_LIST})
  IF(${TRILINOS_PACKAGE_NAME} STREQUAL "RYTHMOS")
      SET(HAVE_TRILINOS_RYTHMOS TRUE)
  ENDIF()
ENDFOREACH()

FOREACH(Tpack ${NOX_LIBRARIES})
  IF(${Tpack} STREQUAL "noxthyra")
    SET(HAVE_NOX_THYRA TRUE)
  ENDIF()
ENDFOREACH()

TRIBITS_CONFIGURE_FILE(${PACKAGE_NAME}_config.h)

SET(HEADERS "")
SET(SOURCES "")
SET(HEADERS ${HEADERS}
  LifeV.hpp
  LifeVersion.hpp
  ${CMAKE_CURRENT_BINARY_DIR}/${PACKAGE_NAME}_config.h
)
SET(SOURCES ${SOURCES}
  LifeV.cpp
  LifeVersion.cpp
)

INSTALL(
  FILES ${HEADERS}
  DESTINATION "${${PROJECT_NAME}_INSTALL_INCLUDE_DIR}/lifev/core"
  COMPONENT ${PACKAGE_NAME}
)

ADD_SUBDIRECTORY(algorithm)
SET(HEADERS ${HEADERS} ${algorithm_HEADERS})
SET(SOURCES ${SOURCES} ${algorithm_SOURCES})

ADD_SUBDIRECTORY(array)
SET(HEADERS ${HEADERS} ${array_HEADERS})
SET(SOURCES ${SOURCES} ${array_SOURCES})

ADD_SUBDIRECTORY(fem)
SET(HEADERS ${HEADERS} ${fem_HEADERS})
SET(SOURCES ${SOURCES} ${fem_SOURCES})

ADD_SUBDIRECTORY(filter)
SET(HEADERS ${HEADERS} ${filter_HEADERS})
SET(SOURCES ${SOURCES} ${filter_SOURCES})

ADD_SUBDIRECTORY(function)
SET(HEADERS ${HEADERS} ${function_HEADERS})
SET(SOURCES ${SOURCES} ${function_SOURCES})

ADD_SUBDIRECTORY(mesh)
SET(HEADERS ${HEADERS} ${mesh_HEADERS})
SET(SOURCES ${SOURCES} ${mesh_SOURCES})

ADD_SUBDIRECTORY(operator)
SET(HEADERS ${HEADERS} ${operator_HEADERS})
SET(SOURCES ${SOURCES} ${operator_SOURCES})

ADD_SUBDIRECTORY(solver)
SET(HEADERS ${HEADERS} ${solver_HEADERS})
SET(SOURCES ${SOURCES} ${solver_SOURCES})

ADD_SUBDIRECTORY(util)
SET(HEADERS ${HEADERS} ${util_HEADERS})
SET(SOURCES ${SOURCES} ${util_SOURCES})

TRIBITS_EXCLUDE_AUTOTOOLS_FILES()
# This is the list of files excluded from the tarball
TRIBITS_EXCLUDE_FILES()

# Add library target
TRIBITS_ADD_LIBRARY(
  lifevcore
  HEADERS ${HEADERS}
  SOURCES ${SOURCES}
)

TRIBITS_ADD_TEST_DIRECTORIES(testsuite)
TRIBITS_ADD_EXAMPLE_DIRECTORIES(examples)


#
# Do standard postprocessing
#

TRIBITS_PACKAGE_POSTPROCESS()
