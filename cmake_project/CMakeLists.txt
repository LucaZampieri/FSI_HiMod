# Project/CMakelists.txt
# In CMake, this is a comment

# To run our code, we will use these steps:
#  - mkdir build && cd build
#  - cmake ..
#  - make


# Setup the minimum version required of CMake to generate the Makefile
cmake_minimum_required (VERSION 2.8)
# Raises a FATAL_ERROR if version < 2.8
cmake_minimum_required (VERSION 2.8 FATAL_ERROR)

# We setup the name for our project. After we do that, this will change some
# directories naming convention generated by CMake. We can send the LANG of
# code as second param
project (FsiHimod)

# Set the project source dir (just convention)
set( FSIHIMOD_SOURCE_DIR ${SOURCE_DIR} )
set( FSIHIMOD_BINARY_DIR ${SCRIPT_PATH} )

# It's useful to setup the current version of our code in the build system
# using a `semver` style
set (LEARN_CMAKE_VERSION_MAJOR 1)
set (LEARN_CMAKE_VERSION_MINOR 0)
set (LEARN_CMAKE_VERSION_PATCH 0)

add_subdirectory(src)
add_subdirectory(include)

add_definitions(-std=c++11)
# END OF WORKING PART
# ----- ----- ----- ----- ----- ---- ---

# Send the variables (version number) to source code header
#configure_file (
#  "${PROJECT_SOURCE_DIR}/TutorialConfig.h.in"
#  "${PROJECT_BINARY_DIR}/TutorialConfig.h")

# Include Directories
# In GCC, this will invoke the "-I" command
#include_directories( include )

# Where are the additional libraries installed? Note: provide includes
# path here, subsequent checks will resolve everything else
#set( CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${SOURCE_DIR}/CMake/modules/" )


# Lists
# Setup the list of source files
#set( FSIHIMOD_SOURCES
#  src/main.cpp
#  src/FEDefinitions.cpp
#  src/FSIData.cpp
#  src/FSISolver.cpp
#  src/NSModalSpaceCircular.cpp
#  src/ReferenceMap.cpp
#)

# Calls the compiler
#
# ${PROJECT_NAME} refers to Learn_CMake
#add_executable( ${PROJECT_NAME} ${FSIHIMOD_SOURCES} )

# Link the libraries
#target_link_libraries( ${PROJECT_NAME} ${LIBS} m )

# Where are the additional libraries installed? Note: provide includes
# path here, subsequent checks will resolve everything else
#set( CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/CMake/modules/" )

# Compiler Condition (gcc ; g++)
#if ( "${CMAKE_C_COMPILER_ID}" STREQUAL "GNU" )
#  message( STATUS "Setting the flags for ${CMAKE_C_COMPILER_ID} compiler" )
#  add_definitions( --std=c99 )
#endif()

# Check for OS
#if( UNIX )
#    set( FSIHIMOD_DEFINITIONS
#        "${LEARN_CMAKE_DEFINITIONS} -Wall -Wextra -Werror -Wno-deprecated-declarations -Wno-unused-parameter -Wno-comment" )
#endif()
